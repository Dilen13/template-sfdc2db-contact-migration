<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:core="http://www.mulesoft.org/schema/mule/core" 
xmlns:http="http://www.mulesoft.org/schema/mule/http" 
xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
xmlns="http://www.mulesoft.org/schema/mule/core" 
xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
xmlns:json="http://www.mulesoft.org/schema/mule/json"
xmlns:spring="http://www.springframework.org/schema/beans" 
version="EE-3.6.2" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd">
    <data-mapper:config name="Contact_To_Contact" transformationGraphPath="contact_to_contact.grf" doc:name="Contact_To_Contact"/>


 <batch:job name="migrateAccountsBatch">
        <batch:threading-profile poolExhaustedAction="WAIT" threadWaitTimeout="-1"/>
        <batch:input>

            <sfdc:query config-ref="Salesforce" query="dsql:SELECT AccountId,Email,FirstName,Id,LastModifiedDate,LastName,Name,Phone,account.name FROM Contact WHERE LastModifiedDate &gt; ${migration.date}" fetchSize="${page.size}" doc:name="Contacts from Salesforce instance"/>
        </batch:input> 
        <batch:process-records>
            <batch:step name="getContactInDatabaseStep">
                <enricher source="#[payload.isEmpty() ? NullPayload.getInstance() : payload[0]]" target="#[recordVars['contactInDatabase']]" doc:name="store result in record var contactInDatabase'">
                    <db:select config-ref="Database" doc:name="query Contact from Database">
                        <db:parameterized-query><![CDATA[SELECT ID, Name FROM Contact WHERE Name = #[payload['Name']]]]></db:parameterized-query>

                    </db:select>
                </enricher>
            </batch:step>

            <batch:step name="transformContacts" >
                <data-mapper:transform doc:name="Contact To Contact" config-ref="Contact_To_Contact"/>

            </batch:step>
            <batch:step name="updateContactsInDatabaseStep" accept-expression="!(payload is NullPayload) &amp;&amp; !(recordVars['contactInDatabase'] is NullPayload)">
                <expression-component doc:name="prepare contact for update"><![CDATA[payload['ID'] = recordVars['contactInDatabase'] is NullPayload ? null : recordVars['contactInDatabase']['ID']]]></expression-component>
                <batch:commit size="200" doc:name="Batch Commit">
                    <db:update config-ref="Database" bulkMode="true" doc:name="update contacts in Database">
                        <db:parameterized-query><![CDATA[UPDATE Contact
SET
`FirstName` = #[payload['FirstName']],
`LastName` = #[payload['LastName']],
`LastModifiedDate` = CURRENT_TIMESTAMP,
`Name` = #[payload['Name']],
`Email` = #[payload['Email']],
`Phone` = #[payload['Phone']]
WHERE `ID` = #[payload['ID']];]]></db:parameterized-query>



                    </db:update>


                </batch:commit>
            </batch:step>
            <batch:step name="insertContactsToDatabaseStep" accept-expression="!(payload is NullPayload) &amp;&amp; recordVars['contactInDatabase'] is NullPayload">
                <batch:commit size="200" doc:name="Batch Commit">
                    <db:insert config-ref="Database" bulkMode="true" doc:name="insert contacts to Database">
                        <db:parameterized-query><![CDATA[INSERT INTO Contact (FirstName, LastName, LastModifiedById, LastModifiedDate, Name, Phone, Email)
VALUES (#[payload['FirstName']], #[payload['LastName']], 'mule@localhost', CURRENT_TIMESTAMP, #[payload['Name']], #[payload['Phone']], #[payload['Email']])]]></db:parameterized-query>



                    </db:insert>
                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
            <scatter-gather doc:name="All">
                <processor-chain>
            		<json:object-to-json-transformer doc:name="transform BatchJobInstance to JSON"/>
            		<logger message="Migration process has finished: #[payload]" level="INFO" doc:name="log 'Migration process has finished'"/>
                </processor-chain>
				<processor-chain>
                    <parse-template location="./src/main/resources/email/body.html" doc:name="Parse Template"/>
                    <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="send mail"/>
				</processor-chain>
            </scatter-gather>
        </batch:on-complete>
    </batch:job>
   
    <flow name="mainFlow"  processingStrategy="synchronous" doc:description="This flow is the entry point to the Template business logic.

This flow should control the direction of the application, and it should be called by the different endpoints that your Template exposes to trigger it.

">
        <batch:execute name="migrateAccountsBatch" doc:name="trigger migrateAccountsBatch"/>
        <exception-strategy ref="defaultChoiceExceptionStrategy" doc:name="catch Exception and call defaultChoiceExceptionStrategy"/>
    </flow>
    
</mule>
