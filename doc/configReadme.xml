<?xml version="1.0"?>
<configuration>
	<placeholders>
		<placeholder id="template_name">Salesforce to Database Contact Migration</placeholder>
	</placeholders>
	<sections>
		<section id="use_case">
As a Salesforce admin I want to synchronize Contacts between Salesforce and a database.

This Template should serve as a foundation for setting an online sync of Contacts from SalesForce instance to database. Everytime you hit the HTTP connector, integration will check for changes in SalesForce source instance in manner of one time integration and it will be responsible for updating the Contact on the target database table.

Requirements have been set not only to be used as examples, but also to establish a starting point to adapt your integration to your requirements.

As implemented, this Template leverages the [Batch Module](http://www.mulesoft.org/documentation/display/current/Batch+Processing).
The batch job is divided into *Input*, *Process* and *On Complete* stages.
The integration is triggered by a HTTP connector defined in the flow that is going to trigger the application, querying Salesforce updates/creations matching a filtering criteria and executing the batch job.
During the *Process* stage, each Salesforce Contact will be filtered depending if it has an existing matching Contact in the database
The last step of the *Process* stage will group the Contacts and insert/update them in a database.
Finally during the *On Complete* stage the Template will log statistics into the console.
		</section>
		<section id="considerations">
<![CDATA[
To make this Anypoint Template run, there are certain preconditions that must be considered. All of them deal with the preparations in both source (Salesforce) and destination (Database) systems, that must be made in order for all to run smoothly. 
**Failling to do so could lead to unexpected behavior of the template.**

This particular Anypoint Template illustrates the broadcast use case between Salesforce and a Database, thus it requires a Database instance to work.
The Anypoint Template comes packaged with a SQL script to create the Database table that it uses. It is the user's responsibility to use that script to create the table in an available schema and change the configuration accordingly. The SQL script file can be found in [src/main/resources/contact.sql] (../master/src/main/resources/contact.sql)
]]>
		</section>
		<section id="run_it">
<![CDATA[
See below.
]]>
		</section>
		<section id="running_on_studio">
<![CDATA[
Once you have imported your Anypoint Template into Anypoint Studio you need to follow these steps to run it:

+ Locate the properties file `mule.dev.properties`, in src/main/resources
+ Fill out all the properties required as per the examples in the section [Properties to be configured](#propertiestobeconfigured)
+ Add dependency for your Database driver to the pom.xml or simply add external JAR file to the build path and rebuild project
+ Configure GenericDatabaseConnector in Global Elements section of the config flow to use your database's specific driver. Classpath to the driver needs to be supplied here.
+ By default this template relies on existing table **"Contact"** in the database of your choice, so it will perform SQL statements against this table, but feel free to customize prepared statements to use different database table or columns.
+ Once this is done, right click on your Anypoint Template project folder 
+ Hover you mouse over `"Run as"`
+ Click on  `"Mule Application"`
]]>
		</section>
		<section id="running_on_cloudhub">
<![CDATA[
While [creating your application on CloudHub](http://www.mulesoft.org/documentation/display/current/Hello+World+on+CloudHub) (Or you can do it later as a next step), you need to go to Deployment > Advanced to set all environment variables detailed in **Properties to be configured** as well as the **mule.env**. 
Follow other steps defined [here](#runonpremise) and once your app is all set and started, there is no need to do anything else. Every time a Contact is created or modified, it will be automatically synchronised to supplied database table.
]]>
		</section>
		<section id="application_configuration">
		<![CDATA[
+ http.port `9090`
+ page.size `1000`
+ migration.date `2014-12-10T14:17:21.000Z`

#### Database Connector configuration
+ database.url `jdbc:mysql://192.168.224.130:3306/database?user=mule&password=mule`

If it is required to connect to a different Database there should be provided the jar for the library and changed the value of that field in the connector.

#### Salesforce Connector configuration
+ sfdc.username `joan.baez@orgb`
+ sfdc.password `JoanBaez456`
+ sfdc.securityToken `ces56arl7apQs56XTddf34X`
+ sfdc.url `https://login.salesforce.com/services/Soap/u/32.0`

#### E-mail Details
+ mail.from `batch.migrateaccounts.migration%40mulesoft.com`
+ mail.to `cesar.garcia@mulesoft.com`
+ mail.subject `Batch Job Finished Report`
]]>
		</section>
		<section id="api_calls">
		<![CDATA[
Salesforce imposes limits on the number of API Calls that can be made. Therefore calculating this amount may be an important factor to consider. 
In this template only one Salesforce query is made so this is not something to worry about.
]]>
		</section>
		<section id="default_business_logic_xml">
		<![CDATA[
Functional aspect of the Template is implemented on this XML, directed by one flow that will check for Salesforce creations/updates. The severeal message processors constitute four high level actions that fully implement the logic of this Template:

1. During the *Input* stage the Template will query Salesforce for all the existing Contacts that match the filtering criteria.
2. During the *Process* stage, each Salesforce Contact will be checked against Database by name, if it has an existing matching objects in database.
3. The choice routing element will then decide whether to perform update on selected database columns or peform insertion.
Finally during the *On Complete* stage the Template will log statistics data into the console.
]]>
		</section>
		<section id="default_endpoints_xml">
		<![CDATA[
This is file is conformed by a Flow containing the HTTP endpoint that will query Salesforce for updated/created Contacts that meet the defined criteria in the query. And then executing the batch job process with the query results.
]]>
		</section>
	</sections>
</configuration>